import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, TouchableOpacity, Alert, ActivityIndicator } from 'react-native';
import type { NativeStackScreenProps } from '@react-navigation/native-stack';
import { AuthStackParamList } from '../../App';// –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —à–ª—è—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
import Feather from 'react-native-vector-icons/Feather'; // ‚úÖ NOWE



import auth from '@react-native-firebase/auth';

type LoginScreenProps = NativeStackScreenProps<AuthStackParamList, 'Login'>;

function LoginScreen({ navigation }: LoginScreenProps) {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [loading, setLoading] = useState(false);
    const [showPassword, setShowPassword] = useState(false); // ‚úÖ NOWE




    const handleLogin = async () => {
        if (!email.trim() || !password.trim()) {
            Alert.alert('B≈ÇƒÖd', 'Proszƒô wpisaƒá email i has≈Ço.');
            return;
        }
        setLoading(true);
        try {
            await auth().signInWithEmailAndPassword(email, password);
            console.log('Logowanie udane dla:', email);
        } catch (error: any) {
            let errorMessage = 'Logowanie nie powiod≈Ço siƒô. Spr√≥buj ponownie.';
            if (error.code === 'auth/user-not-found' || error.code === 'auth/invalid-credential') {
                errorMessage = 'Nieprawid≈Çowy email lub has≈Ço.';
            } else if (error.code === 'auth/invalid-email') {
                errorMessage = 'Niepoprawny format email.';
            }
            console.error('B≈ÇƒÖd logowania:', error.code, error.message);
            Alert.alert('B≈ÇƒÖd logowania', errorMessage);
        }
        setLoading(false);
    };

    const handleNavigateToRegister = () => {
        navigation.navigate('Register');
    };

    // –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è handleForgotPassword
    const handleForgotPassword = async () => {
        console.log('--- handleForgotPassword --- –ö–Ω–æ–ø–∫—É "Zapomnia≈Çe≈õ has≈Ça?" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ!');
        const trimmedEmail = email.trim(); // –ë–µ—Ä–µ–º–æ email –∑ –ø–æ–ª—è –≤–≤–æ–¥—É

        if (!trimmedEmail) {
            Alert.alert('B≈ÇƒÖd', 'Proszƒô najpierw wprowadziƒá sw√≥j adres email w polu powy≈ºej.'); // –ü–æ–º–∏–ª–∫–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å email (–ø–æ–ª—å—Å—å–∫.)
            return;
        }

        setLoading(true);
        try {
            await auth().sendPasswordResetEmail(trimmedEmail);
            Alert.alert(
                "Sprawd≈∫ email", // –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email (–ø–æ–ª—å—Å—å–∫.)
                `Wys≈Çano link do resetowania has≈Ça na adres ${trimmedEmail}. Sprawd≈∫ swojƒÖ skrzynkƒô pocztowƒÖ (r√≥wnie≈º folder spam).` // –ù–∞–¥—ñ—Å–ª–∞–Ω–æ ... (–ø–æ–ª—å—Å—å–∫.)
            );
        } catch (error: any) {
            let errorMessage = "Nie uda≈Ço siƒô wys≈Çaƒá emaila do resetowania has≈Ça. Spr√≥buj ponownie."; // –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏... (–ø–æ–ª—å—Å—å–∫.)
            if (error.code === 'auth/invalid-email') {
                errorMessage = 'Niepoprawny format adresu email.';
            } else if (error.code === 'auth/user-not-found') {
                // Firebase –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è email –¥–ª—è –±–µ–∑–ø–µ–∫–∏.
                // –¢–æ–º—É –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –Ω–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—î, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.
                errorMessage = `Je≈õli adres ${trimmedEmail} jest zarejestrowany, otrzymasz na niego link do resetowania has≈Ça. Sprawd≈∫ r√≥wnie≈º folder spam.`;
            }
            console.error("B≈ÇƒÖd resetowania has≈Ça:", error.code, error.message);
            Alert.alert("B≈ÇƒÖd wysy≈Çania", errorMessage); // –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è (–ø–æ–ª—å—Å—å–∫.)
        }
        setLoading(false);
    };

    console.log('LoginScreen - —Å—Ç–∞–Ω loading:', loading);

    return (
        <View style={styles.container}>
            <Text style={styles.title}>Logowanie do MathFun</Text>

            <TextInput
                style={styles.input}
                placeholder="Adres email"
                value={email}
                onChangeText={setEmail} // setEmail —Ç–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î email, —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ
                keyboardType="email-address"
                autoCapitalize="none"
                autoCorrect={false}
            />

            <View style={styles.passwordWrapper}> {/* üîÑ ZMIANA */}
                <TextInput
                    style={styles.passwordInput} // üîÑ ZMIANA
                    placeholder="Has≈Ço"
                    value={password}
                    onChangeText={setPassword}
                    secureTextEntry={!showPassword} // ‚úÖ NOWE
                    autoCapitalize="none"
                />
                <TouchableOpacity onPress={() => setShowPassword(!showPassword)}> {/* ‚úÖ NOWE */}
                    <Feather
                        name={showPassword ? 'eye' : 'eye-off'} // ‚úÖ NOWE
                        size={22}
                        color="#007bff"
                    />
                </TouchableOpacity>
            </View>

            {loading ? (
                <ActivityIndicator size="large" color="#007bff" style={styles.loader} />
            ) : (
                <View style={styles.buttonWrapper}>
                    <Button
                        title="Zaloguj siƒô"
                        onPress={handleLogin}
                    />
                </View>
            )}

            {/* –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å disabled={loading} –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä –º–∞—î –ª–æ–≥—ñ–∫—É */}
            <TouchableOpacity onPress={handleForgotPassword} style={styles.forgotPasswordButton} disabled={loading}>
                <Text style={styles.forgotPasswordText}>
                    Zapomnia≈Çe≈õ has≈Ça?
                </Text>
            </TouchableOpacity>

            <TouchableOpacity onPress={handleNavigateToRegister} style={styles.registerButton} disabled={loading}>
                <Text style={styles.registerButtonText}>
                    Nie masz konta? Zarejestruj siƒô
                </Text>
            </TouchableOpacity>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
        backgroundColor: '#f0f8ff',
    },
    title: {
        fontSize: 24,
        fontWeight: 'bold',
        marginBottom: 30,
        color: '#333',
    },
    input: {
        width: '100%',
        height: 50,
        backgroundColor: '#fff',
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        paddingHorizontal: 15,
        marginBottom: 15,
        fontSize: 16,
    },
    passwordWrapper: {
        width: '100%',
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#fff',
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        paddingHorizontal: 15,
        marginBottom: 15,
        height: 50,
    }, // ‚úÖ NOWE
    passwordInput: {
        flex: 1,
        fontSize: 16,
    }, // ‚úÖ NOWE
    buttonWrapper: {
        width: '100%',
        marginBottom: 10,
    },
    loader: {
        marginVertical: 10,
        height: 50
    },
    forgotPasswordButton: {
        marginTop: 15,
        marginBottom: 5,
    },
    forgotPasswordText: {
        color: '#6c757d',
        fontSize: 15,
    },
    registerButton: {
        marginTop: 10,
    },
    registerButtonText: {
        color: '#007bff',
        fontSize: 16,
    },
});

export default LoginScreen;
